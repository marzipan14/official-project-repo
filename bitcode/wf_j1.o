; ModuleID = '/root/.unikraft/apps/redis/build/libnewlibc/origin/newlib-2.5.0.20170922/newlib/libm/math/wf_j1.c'
source_filename = "/root/.unikraft/apps/redis/build/libnewlibc/origin/newlib-2.5.0.20170922/newlib/libm/math/wf_j1.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.exception = type { i32, i8*, double, double, double, i32 }

@__fdlib_version = external dso_local local_unnamed_addr global i32, align 4
@.str = private unnamed_addr constant [4 x i8] c"j1f\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"y1f\00", align 1
@__A_VARIABLE = internal global i32 0

; Function Attrs: noredzone nounwind
define dso_local float @j1f(float) local_unnamed_addr #0 !dbg !18 {
  %2 = alloca %struct.exception, align 8
  call void @llvm.dbg.value(metadata float %0, metadata !22, metadata !DIExpression()), !dbg !35
  %3 = bitcast %struct.exception* %2 to i8*, !dbg !36
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %3) #4, !dbg !36
  %4 = tail call float @__ieee754_j1f(float %0) #5, !dbg !37
  call void @llvm.dbg.value(metadata float %4, metadata !23, metadata !DIExpression()), !dbg !38
  %5 = load i32, i32* @__fdlib_version, align 4, !dbg !39, !tbaa !41
  %6 = icmp eq i32 %5, -1, !dbg !44
  br i1 %6, label %40, label %7, !dbg !45

; <label>:7:                                      ; preds = %1
  %8 = tail call i32 @__fpclassifyf(float %0) #5, !dbg !46
  %9 = icmp eq i32 %8, 0, !dbg !46
  br i1 %9, label %40, label %10, !dbg !47

; <label>:10:                                     ; preds = %7
  %11 = tail call float @fabsf(float %0) #5, !dbg !48
  %12 = fcmp ogt float %11, 0x434921FB60000000, !dbg !50
  br i1 %12, label %13, label %40, !dbg !51

; <label>:13:                                     ; preds = %10
  %14 = getelementptr inbounds %struct.exception, %struct.exception* %2, i64 0, i32 0, !dbg !52
  store i32 5, i32* %14, align 8, !dbg !54, !tbaa !55
  %15 = getelementptr inbounds %struct.exception, %struct.exception* %2, i64 0, i32 1, !dbg !60
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8** %15, align 8, !dbg !61, !tbaa !62
  %16 = getelementptr inbounds %struct.exception, %struct.exception* %2, i64 0, i32 5, !dbg !63
  store i32 0, i32* %16, align 8, !dbg !64, !tbaa !65
  %17 = fpext float %0 to double, !dbg !66
  %18 = getelementptr inbounds %struct.exception, %struct.exception* %2, i64 0, i32 3, !dbg !67
  store double %17, double* %18, align 8, !dbg !68, !tbaa !69
  %19 = getelementptr inbounds %struct.exception, %struct.exception* %2, i64 0, i32 2, !dbg !70
  store double %17, double* %19, align 8, !dbg !71, !tbaa !72
  %20 = getelementptr inbounds %struct.exception, %struct.exception* %2, i64 0, i32 4, !dbg !73
  store double 0.000000e+00, double* %20, align 8, !dbg !74, !tbaa !75
  %21 = load i32, i32* @__fdlib_version, align 4, !dbg !76, !tbaa !41
  %22 = icmp eq i32 %21, 2, !dbg !78
  br i1 %22, label %23, label %25, !dbg !79

; <label>:23:                                     ; preds = %13
  %24 = tail call i32* @__errno() #5, !dbg !80
  br label %30, !dbg !80

; <label>:25:                                     ; preds = %13
  call void @llvm.dbg.value(metadata %struct.exception* %2, metadata !24, metadata !DIExpression(DW_OP_deref)), !dbg !81
  %26 = call i32 @matherr(%struct.exception* nonnull %2) #5, !dbg !82
  %27 = icmp eq i32 %26, 0, !dbg !82
  br i1 %27, label %28, label %32, !dbg !84

; <label>:28:                                     ; preds = %25
  %29 = call i32* @__errno() #5, !dbg !85
  br label %30, !dbg !87

; <label>:30:                                     ; preds = %23, %28
  %31 = phi i32* [ %29, %28 ], [ %24, %23 ]
  store i32 34, i32* %31, align 4, !dbg !88, !tbaa !89
  br label %32, !dbg !90

; <label>:32:                                     ; preds = %30, %25
  %33 = load i32, i32* %16, align 8, !dbg !90, !tbaa !65
  %34 = icmp eq i32 %33, 0, !dbg !92
  br i1 %34, label %37, label %35, !dbg !93

; <label>:35:                                     ; preds = %32
  %36 = call i32* @__errno() #5, !dbg !94
  store i32 %33, i32* %36, align 4, !dbg !95, !tbaa !89
  br label %37, !dbg !94

; <label>:37:                                     ; preds = %32, %35
  %38 = load double, double* %20, align 8, !dbg !96, !tbaa !75
  %39 = fptrunc double %38 to float, !dbg !97
  br label %40, !dbg !98

; <label>:40:                                     ; preds = %10, %1, %7, %37
  %41 = phi float [ %39, %37 ], [ %4, %7 ], [ %4, %1 ], [ %4, %10 ], !dbg !99
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %3) #4, !dbg !100
  store volatile i32 42, i32* @__A_VARIABLE, align 4, !dbg !100
  ret float %41, !dbg !100
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: noredzone
declare dso_local float @__ieee754_j1f(float) local_unnamed_addr #2

; Function Attrs: noredzone
declare dso_local i32 @__fpclassifyf(float) local_unnamed_addr #2

; Function Attrs: noredzone
declare dso_local float @fabsf(float) local_unnamed_addr #2

; Function Attrs: noredzone
declare dso_local i32* @__errno() local_unnamed_addr #2

; Function Attrs: noredzone
declare dso_local i32 @matherr(%struct.exception*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: noredzone nounwind
define dso_local float @y1f(float) local_unnamed_addr #0 !dbg !101 {
  %2 = alloca %struct.exception, align 8
  call void @llvm.dbg.value(metadata float %0, metadata !103, metadata !DIExpression()), !dbg !106
  %3 = bitcast %struct.exception* %2 to i8*, !dbg !107
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %3) #4, !dbg !107
  %4 = tail call float @__ieee754_y1f(float %0) #5, !dbg !108
  call void @llvm.dbg.value(metadata float %4, metadata !104, metadata !DIExpression()), !dbg !109
  %5 = load i32, i32* @__fdlib_version, align 4, !dbg !110, !tbaa !41
  %6 = icmp eq i32 %5, -1, !dbg !112
  br i1 %6, label %70, label %7, !dbg !113

; <label>:7:                                      ; preds = %1
  %8 = tail call i32 @__fpclassifyf(float %0) #5, !dbg !114
  %9 = icmp eq i32 %8, 0, !dbg !114
  br i1 %9, label %70, label %10, !dbg !115

; <label>:10:                                     ; preds = %7
  %11 = fcmp ugt float %0, 0.000000e+00, !dbg !116
  br i1 %11, label %41, label %12, !dbg !118

; <label>:12:                                     ; preds = %10
  %13 = getelementptr inbounds %struct.exception, %struct.exception* %2, i64 0, i32 0, !dbg !119
  store i32 1, i32* %13, align 8, !dbg !121, !tbaa !55
  %14 = getelementptr inbounds %struct.exception, %struct.exception* %2, i64 0, i32 1, !dbg !122
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8** %14, align 8, !dbg !123, !tbaa !62
  %15 = getelementptr inbounds %struct.exception, %struct.exception* %2, i64 0, i32 5, !dbg !124
  store i32 0, i32* %15, align 8, !dbg !125, !tbaa !65
  %16 = fpext float %0 to double, !dbg !126
  %17 = getelementptr inbounds %struct.exception, %struct.exception* %2, i64 0, i32 3, !dbg !127
  store double %16, double* %17, align 8, !dbg !128, !tbaa !69
  %18 = getelementptr inbounds %struct.exception, %struct.exception* %2, i64 0, i32 2, !dbg !129
  store double %16, double* %18, align 8, !dbg !130, !tbaa !72
  %19 = load i32, i32* @__fdlib_version, align 4, !dbg !131, !tbaa !41
  %20 = icmp eq i32 %19, 0, !dbg !133
  %21 = getelementptr inbounds %struct.exception, %struct.exception* %2, i64 0, i32 4, !dbg !134
  %22 = select i1 %20, double 0xC7EFFFFFE0000000, double 0xFFF0000000000000, !dbg !135
  store double %22, double* %21, align 8, !dbg !134, !tbaa !75
  %23 = icmp eq i32 %19, 2, !dbg !136
  br i1 %23, label %24, label %26, !dbg !138

; <label>:24:                                     ; preds = %12
  %25 = tail call i32* @__errno() #5, !dbg !139
  br label %31, !dbg !139

; <label>:26:                                     ; preds = %12
  call void @llvm.dbg.value(metadata %struct.exception* %2, metadata !105, metadata !DIExpression(DW_OP_deref)), !dbg !140
  %27 = call i32 @matherr(%struct.exception* nonnull %2) #5, !dbg !141
  %28 = icmp eq i32 %27, 0, !dbg !141
  br i1 %28, label %29, label %33, !dbg !143

; <label>:29:                                     ; preds = %26
  %30 = call i32* @__errno() #5, !dbg !144
  br label %31, !dbg !146

; <label>:31:                                     ; preds = %24, %29
  %32 = phi i32* [ %30, %29 ], [ %25, %24 ]
  store i32 33, i32* %32, align 4, !dbg !147, !tbaa !89
  br label %33, !dbg !148

; <label>:33:                                     ; preds = %31, %26
  %34 = load i32, i32* %15, align 8, !dbg !148, !tbaa !65
  %35 = icmp eq i32 %34, 0, !dbg !150
  br i1 %35, label %38, label %36, !dbg !151

; <label>:36:                                     ; preds = %33
  %37 = call i32* @__errno() #5, !dbg !152
  store i32 %34, i32* %37, align 4, !dbg !153, !tbaa !89
  br label %38, !dbg !152

; <label>:38:                                     ; preds = %33, %36
  %39 = load double, double* %21, align 8, !dbg !154, !tbaa !75
  %40 = fptrunc double %39 to float, !dbg !155
  br label %70, !dbg !156

; <label>:41:                                     ; preds = %10
  %42 = fcmp ogt float %0, 0x434921FB60000000, !dbg !157
  br i1 %42, label %43, label %70, !dbg !159

; <label>:43:                                     ; preds = %41
  %44 = getelementptr inbounds %struct.exception, %struct.exception* %2, i64 0, i32 0, !dbg !160
  store i32 5, i32* %44, align 8, !dbg !162, !tbaa !55
  %45 = getelementptr inbounds %struct.exception, %struct.exception* %2, i64 0, i32 1, !dbg !163
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8** %45, align 8, !dbg !164, !tbaa !62
  %46 = getelementptr inbounds %struct.exception, %struct.exception* %2, i64 0, i32 5, !dbg !165
  store i32 0, i32* %46, align 8, !dbg !166, !tbaa !65
  %47 = fpext float %0 to double, !dbg !167
  %48 = getelementptr inbounds %struct.exception, %struct.exception* %2, i64 0, i32 3, !dbg !168
  store double %47, double* %48, align 8, !dbg !169, !tbaa !69
  %49 = getelementptr inbounds %struct.exception, %struct.exception* %2, i64 0, i32 2, !dbg !170
  store double %47, double* %49, align 8, !dbg !171, !tbaa !72
  %50 = getelementptr inbounds %struct.exception, %struct.exception* %2, i64 0, i32 4, !dbg !172
  store double 0.000000e+00, double* %50, align 8, !dbg !173, !tbaa !75
  %51 = load i32, i32* @__fdlib_version, align 4, !dbg !174, !tbaa !41
  %52 = icmp eq i32 %51, 2, !dbg !176
  br i1 %52, label %53, label %55, !dbg !177

; <label>:53:                                     ; preds = %43
  %54 = tail call i32* @__errno() #5, !dbg !178
  br label %60, !dbg !178

; <label>:55:                                     ; preds = %43
  call void @llvm.dbg.value(metadata %struct.exception* %2, metadata !105, metadata !DIExpression(DW_OP_deref)), !dbg !140
  %56 = call i32 @matherr(%struct.exception* nonnull %2) #5, !dbg !179
  %57 = icmp eq i32 %56, 0, !dbg !179
  br i1 %57, label %58, label %62, !dbg !181

; <label>:58:                                     ; preds = %55
  %59 = call i32* @__errno() #5, !dbg !182
  br label %60, !dbg !184

; <label>:60:                                     ; preds = %53, %58
  %61 = phi i32* [ %59, %58 ], [ %54, %53 ]
  store i32 34, i32* %61, align 4, !dbg !185, !tbaa !89
  br label %62, !dbg !186

; <label>:62:                                     ; preds = %60, %55
  %63 = load i32, i32* %46, align 8, !dbg !186, !tbaa !65
  %64 = icmp eq i32 %63, 0, !dbg !188
  br i1 %64, label %67, label %65, !dbg !189

; <label>:65:                                     ; preds = %62
  %66 = call i32* @__errno() #5, !dbg !190
  store i32 %63, i32* %66, align 4, !dbg !191, !tbaa !89
  br label %67, !dbg !190

; <label>:67:                                     ; preds = %62, %65
  %68 = load double, double* %50, align 8, !dbg !192, !tbaa !75
  %69 = fptrunc double %68 to float, !dbg !193
  br label %70, !dbg !194

; <label>:70:                                     ; preds = %41, %1, %7, %67, %38
  %71 = phi float [ %40, %38 ], [ %69, %67 ], [ %4, %7 ], [ %4, %1 ], [ %4, %41 ], !dbg !195
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %3) #4, !dbg !196
  store volatile i32 42, i32* @__A_VARIABLE, align 4, !dbg !196
  ret float %71, !dbg !196
}

; Function Attrs: noredzone
declare dso_local float @__ieee754_y1f(float) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.value(metadata, metadata, metadata) #3

attributes #0 = { noredzone nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noredzone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }
attributes #5 = { nobuiltin noredzone nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!14, !15, !16}
!llvm.ident = !{!17}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 7.0.1-8+deb10u2 (tags/RELEASE_701/final)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !11)
!1 = !DIFile(filename: "/root/.unikraft/apps/redis/build/libnewlibc/origin/newlib-2.5.0.20170922/newlib/libm/math/wf_j1.c", directory: "/root/.unikraft/apps/redis/build")
!2 = !{!3}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__fdlibm_version", file: !4, line: 642, baseType: !5, size: 32, elements: !6)
!4 = !DIFile(filename: "/root/.unikraft/apps/redis/build/libnewlibc/origin/newlib-2.5.0.20170922/newlib/libc/include/math.h", directory: "/root/.unikraft/apps/redis/build")
!5 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!6 = !{!7, !8, !9, !10}
!7 = !DIEnumerator(name: "__fdlibm_ieee", value: -1)
!8 = !DIEnumerator(name: "__fdlibm_svid", value: 0)
!9 = !DIEnumerator(name: "__fdlibm_xopen", value: 1)
!10 = !DIEnumerator(name: "__fdlibm_posix", value: 2)
!11 = !{!12, !13}
!12 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!13 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!14 = !{i32 2, !"Dwarf Version", i32 4}
!15 = !{i32 2, !"Debug Info Version", i32 3}
!16 = !{i32 1, !"wchar_size", i32 4}
!17 = !{!"clang version 7.0.1-8+deb10u2 (tags/RELEASE_701/final)"}
!18 = distinct !DISubprogram(name: "j1f", scope: !1, file: !1, line: 25, type: !19, isLocal: false, isDefinition: true, scopeLine: 30, flags: DIFlagPrototyped, isOptimized: true, unit: !0, retainedNodes: !21)
!19 = !DISubroutineType(types: !20)
!20 = !{!12, !12}
!21 = !{!22, !23, !24}
!22 = !DILocalVariable(name: "x", arg: 1, scope: !18, file: !1, line: 25, type: !12)
!23 = !DILocalVariable(name: "z", scope: !18, file: !1, line: 34, type: !12)
!24 = !DILocalVariable(name: "exc", scope: !18, file: !1, line: 35, type: !25)
!25 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "exception", file: !4, line: 578, size: 384, elements: !26)
!26 = !{!27, !28, !31, !32, !33, !34}
!27 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !25, file: !4, line: 581, baseType: !5, size: 32)
!28 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !25, file: !4, line: 582, baseType: !29, size: 64, offset: 64)
!29 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !30, size: 64)
!30 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!31 = !DIDerivedType(tag: DW_TAG_member, name: "arg1", scope: !25, file: !4, line: 583, baseType: !13, size: 64, offset: 128)
!32 = !DIDerivedType(tag: DW_TAG_member, name: "arg2", scope: !25, file: !4, line: 584, baseType: !13, size: 64, offset: 192)
!33 = !DIDerivedType(tag: DW_TAG_member, name: "retval", scope: !25, file: !4, line: 585, baseType: !13, size: 64, offset: 256)
!34 = !DIDerivedType(tag: DW_TAG_member, name: "err", scope: !25, file: !4, line: 586, baseType: !5, size: 32, offset: 320)
!35 = !DILocation(line: 25, column: 18, scope: !18)
!36 = !DILocation(line: 35, column: 2, scope: !18)
!37 = !DILocation(line: 36, column: 6, scope: !18)
!38 = !DILocation(line: 34, column: 8, scope: !18)
!39 = !DILocation(line: 37, column: 5, scope: !40)
!40 = distinct !DILexicalBlock(scope: !18, file: !1, line: 37, column: 5)
!41 = !{!42, !42, i64 0}
!42 = !{!"omnipotent char", !43, i64 0}
!43 = !{!"Simple C/C++ TBAA"}
!44 = !DILocation(line: 37, column: 18, scope: !40)
!45 = !DILocation(line: 37, column: 28, scope: !40)
!46 = !DILocation(line: 37, column: 31, scope: !40)
!47 = !DILocation(line: 37, column: 5, scope: !18)
!48 = !DILocation(line: 38, column: 5, scope: !49)
!49 = distinct !DILexicalBlock(scope: !18, file: !1, line: 38, column: 5)
!50 = !DILocation(line: 38, column: 13, scope: !49)
!51 = !DILocation(line: 38, column: 5, scope: !18)
!52 = !DILocation(line: 40, column: 17, scope: !53)
!53 = distinct !DILexicalBlock(scope: !49, file: !1, line: 38, column: 30)
!54 = !DILocation(line: 40, column: 22, scope: !53)
!55 = !{!56, !57, i64 0}
!56 = !{!"exception", !57, i64 0, !58, i64 8, !59, i64 16, !59, i64 24, !59, i64 32, !57, i64 40}
!57 = !{!"int", !42, i64 0}
!58 = !{!"any pointer", !42, i64 0}
!59 = !{!"double", !42, i64 0}
!60 = !DILocation(line: 41, column: 17, scope: !53)
!61 = !DILocation(line: 41, column: 22, scope: !53)
!62 = !{!56, !58, i64 8}
!63 = !DILocation(line: 42, column: 10, scope: !53)
!64 = !DILocation(line: 42, column: 14, scope: !53)
!65 = !{!56, !57, i64 40}
!66 = !DILocation(line: 43, column: 28, scope: !53)
!67 = !DILocation(line: 43, column: 21, scope: !53)
!68 = !DILocation(line: 43, column: 26, scope: !53)
!69 = !{!56, !59, i64 24}
!70 = !DILocation(line: 43, column: 10, scope: !53)
!71 = !DILocation(line: 43, column: 15, scope: !53)
!72 = !{!56, !59, i64 16}
!73 = !DILocation(line: 44, column: 17, scope: !53)
!74 = !DILocation(line: 44, column: 24, scope: !53)
!75 = !{!56, !59, i64 32}
!76 = !DILocation(line: 45, column: 17, scope: !77)
!77 = distinct !DILexicalBlock(scope: !53, file: !1, line: 45, column: 17)
!78 = !DILocation(line: 45, column: 30, scope: !77)
!79 = !DILocation(line: 45, column: 17, scope: !53)
!80 = !DILocation(line: 46, column: 17, scope: !77)
!81 = !DILocation(line: 35, column: 19, scope: !18)
!82 = !DILocation(line: 47, column: 23, scope: !83)
!83 = distinct !DILexicalBlock(scope: !77, file: !1, line: 47, column: 22)
!84 = !DILocation(line: 47, column: 22, scope: !77)
!85 = !DILocation(line: 48, column: 17, scope: !86)
!86 = distinct !DILexicalBlock(scope: !83, file: !1, line: 47, column: 38)
!87 = !DILocation(line: 49, column: 13, scope: !86)
!88 = !DILocation(line: 0, scope: !77)
!89 = !{!57, !57, i64 0}
!90 = !DILocation(line: 50, column: 14, scope: !91)
!91 = distinct !DILexicalBlock(scope: !53, file: !1, line: 50, column: 10)
!92 = !DILocation(line: 50, column: 18, scope: !91)
!93 = !DILocation(line: 50, column: 10, scope: !53)
!94 = !DILocation(line: 51, column: 9, scope: !91)
!95 = !DILocation(line: 51, column: 15, scope: !91)
!96 = !DILocation(line: 52, column: 24, scope: !53)
!97 = !DILocation(line: 52, column: 20, scope: !53)
!98 = !DILocation(line: 52, column: 13, scope: !53)
!99 = !DILocation(line: 0, scope: !49)
!100 = !DILocation(line: 56, column: 1, scope: !18)
!101 = distinct !DISubprogram(name: "y1f", scope: !1, file: !1, line: 59, type: !19, isLocal: false, isDefinition: true, scopeLine: 64, flags: DIFlagPrototyped, isOptimized: true, unit: !0, retainedNodes: !102)
!102 = !{!103, !104, !105}
!103 = !DILocalVariable(name: "x", arg: 1, scope: !101, file: !1, line: 59, type: !12)
!104 = !DILocalVariable(name: "z", scope: !101, file: !1, line: 68, type: !12)
!105 = !DILocalVariable(name: "exc", scope: !101, file: !1, line: 69, type: !25)
!106 = !DILocation(line: 59, column: 18, scope: !101)
!107 = !DILocation(line: 69, column: 2, scope: !101)
!108 = !DILocation(line: 70, column: 6, scope: !101)
!109 = !DILocation(line: 68, column: 8, scope: !101)
!110 = !DILocation(line: 71, column: 5, scope: !111)
!111 = distinct !DILexicalBlock(scope: !101, file: !1, line: 71, column: 5)
!112 = !DILocation(line: 71, column: 18, scope: !111)
!113 = !DILocation(line: 71, column: 28, scope: !111)
!114 = !DILocation(line: 71, column: 31, scope: !111)
!115 = !DILocation(line: 71, column: 5, scope: !101)
!116 = !DILocation(line: 72, column: 14, scope: !117)
!117 = distinct !DILexicalBlock(scope: !101, file: !1, line: 72, column: 12)
!118 = !DILocation(line: 72, column: 12, scope: !101)
!119 = !DILocation(line: 80, column: 10, scope: !120)
!120 = distinct !DILexicalBlock(scope: !117, file: !1, line: 72, column: 28)
!121 = !DILocation(line: 80, column: 15, scope: !120)
!122 = !DILocation(line: 81, column: 10, scope: !120)
!123 = !DILocation(line: 81, column: 15, scope: !120)
!124 = !DILocation(line: 82, column: 10, scope: !120)
!125 = !DILocation(line: 82, column: 14, scope: !120)
!126 = !DILocation(line: 83, column: 28, scope: !120)
!127 = !DILocation(line: 83, column: 21, scope: !120)
!128 = !DILocation(line: 83, column: 26, scope: !120)
!129 = !DILocation(line: 83, column: 10, scope: !120)
!130 = !DILocation(line: 83, column: 15, scope: !120)
!131 = !DILocation(line: 84, column: 10, scope: !132)
!132 = distinct !DILexicalBlock(scope: !120, file: !1, line: 84, column: 10)
!133 = !DILocation(line: 84, column: 23, scope: !132)
!134 = !DILocation(line: 0, scope: !132)
!135 = !DILocation(line: 85, column: 9, scope: !132)
!136 = !DILocation(line: 88, column: 23, scope: !137)
!137 = distinct !DILexicalBlock(scope: !120, file: !1, line: 88, column: 10)
!138 = !DILocation(line: 88, column: 10, scope: !120)
!139 = !DILocation(line: 89, column: 9, scope: !137)
!140 = !DILocation(line: 69, column: 19, scope: !101)
!141 = !DILocation(line: 90, column: 16, scope: !142)
!142 = distinct !DILexicalBlock(scope: !137, file: !1, line: 90, column: 15)
!143 = !DILocation(line: 90, column: 15, scope: !137)
!144 = !DILocation(line: 91, column: 9, scope: !145)
!145 = distinct !DILexicalBlock(scope: !142, file: !1, line: 90, column: 31)
!146 = !DILocation(line: 92, column: 6, scope: !145)
!147 = !DILocation(line: 0, scope: !137)
!148 = !DILocation(line: 93, column: 14, scope: !149)
!149 = distinct !DILexicalBlock(scope: !120, file: !1, line: 93, column: 10)
!150 = !DILocation(line: 93, column: 18, scope: !149)
!151 = !DILocation(line: 93, column: 10, scope: !120)
!152 = !DILocation(line: 94, column: 9, scope: !149)
!153 = !DILocation(line: 94, column: 15, scope: !149)
!154 = !DILocation(line: 95, column: 31, scope: !120)
!155 = !DILocation(line: 95, column: 20, scope: !120)
!156 = !DILocation(line: 95, column: 13, scope: !120)
!157 = !DILocation(line: 97, column: 6, scope: !158)
!158 = distinct !DILexicalBlock(scope: !101, file: !1, line: 97, column: 5)
!159 = !DILocation(line: 97, column: 5, scope: !101)
!160 = !DILocation(line: 99, column: 17, scope: !161)
!161 = distinct !DILexicalBlock(scope: !158, file: !1, line: 97, column: 23)
!162 = !DILocation(line: 99, column: 22, scope: !161)
!163 = !DILocation(line: 100, column: 17, scope: !161)
!164 = !DILocation(line: 100, column: 22, scope: !161)
!165 = !DILocation(line: 101, column: 10, scope: !161)
!166 = !DILocation(line: 101, column: 14, scope: !161)
!167 = !DILocation(line: 102, column: 28, scope: !161)
!168 = !DILocation(line: 102, column: 21, scope: !161)
!169 = !DILocation(line: 102, column: 26, scope: !161)
!170 = !DILocation(line: 102, column: 10, scope: !161)
!171 = !DILocation(line: 102, column: 15, scope: !161)
!172 = !DILocation(line: 103, column: 17, scope: !161)
!173 = !DILocation(line: 103, column: 24, scope: !161)
!174 = !DILocation(line: 104, column: 17, scope: !175)
!175 = distinct !DILexicalBlock(scope: !161, file: !1, line: 104, column: 17)
!176 = !DILocation(line: 104, column: 30, scope: !175)
!177 = !DILocation(line: 104, column: 17, scope: !161)
!178 = !DILocation(line: 105, column: 17, scope: !175)
!179 = !DILocation(line: 106, column: 23, scope: !180)
!180 = distinct !DILexicalBlock(scope: !175, file: !1, line: 106, column: 22)
!181 = !DILocation(line: 106, column: 22, scope: !175)
!182 = !DILocation(line: 107, column: 17, scope: !183)
!183 = distinct !DILexicalBlock(scope: !180, file: !1, line: 106, column: 38)
!184 = !DILocation(line: 108, column: 13, scope: !183)
!185 = !DILocation(line: 0, scope: !175)
!186 = !DILocation(line: 109, column: 14, scope: !187)
!187 = distinct !DILexicalBlock(scope: !161, file: !1, line: 109, column: 10)
!188 = !DILocation(line: 109, column: 18, scope: !187)
!189 = !DILocation(line: 109, column: 10, scope: !161)
!190 = !DILocation(line: 110, column: 9, scope: !187)
!191 = !DILocation(line: 110, column: 15, scope: !187)
!192 = !DILocation(line: 111, column: 31, scope: !161)
!193 = !DILocation(line: 111, column: 20, scope: !161)
!194 = !DILocation(line: 111, column: 13, scope: !161)
!195 = !DILocation(line: 0, scope: !158)
!196 = !DILocation(line: 115, column: 1, scope: !101)
